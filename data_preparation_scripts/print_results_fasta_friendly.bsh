#! /bin/bash

RESULTS=$1
FA_HEADERS=$2
FIELD_SEP=$3

# check that the user supplied the repmaestro results file
if [ -z ${RESULTS}  ]
then
   echo "You have not specified the result file (from repmaestro) to format! (first arg)";
   exit 1;
fi

#  check that the user supplied the repmaestro header files
if [ -z ${FA_HEADERS}  ]
then
   echo "You have not specified a FastA header file to use in formating! (second arg)";
   exit 1;
fi

#  check that the user supplied the repmaestro header files
if [ -z ${FIELD_SEP}  ]
then
   fieldsep=","
else
   fieldsep=$3
fi

cur_offset_first=0;
cur_offset_second=0;

exec 7<$FA_HEADERS
read first_line <&7;
curr_line=$first_line;

while [ 1 ]
do
  read next_line <&7;
  
  echo $curr_line |  awk 'BEGIN { FS = " " }; 
  {  
    for (i=3; i<=NF; ++i) printf("%s ", $i);
    printf("\n");
  }';

  if [[ -z "$next_line" ]]
  then
     cur_offset_first=`echo $curr_line |  awk 'BEGIN { FS = " " }; { print $1 }'`  
  
     exec 8<$RESULTS
     while read line <&8;
     do
       echo -n $line | awk -v offset="$cur_offset_first" -v fieldsep="$fieldsep" 'BEGIN {FS=fieldsep; count=0; not_part=0;}; 
       {
         for (i=1; i<=NF-1; ++i) 
         {
           if ($i >= offset) 
           {
             ;
           }
           else
           {
             not_part++;
           }
         }

         if(not_part != NF-1)
         { 
           for (i=1; i<=NF-1; ++i) 
           {
             if ($i >= offset) 
             {
               printf("%d, ", $i); count++;
             }
             else
             {
               printf("(%d), ", $i); count++; 
             }
           }

           if(count!=0) printf("%d\n", $NF);
         }
       }';
     done
     exit 1;
  else
     cur_offset_second=`echo $next_line |  awk 'BEGIN { FS = " " }; { print $1 }'`  

     exec 8<$RESULTS
     while read line <&8;
     do
       echo -n $line | awk -v foffset="$cur_offset_first" -v soffset="$cur_offset_second" -v fieldsep="$fieldsep" 'BEGIN {FS=fieldsep; count=0; not_part=0;}; 
       {
         for (i=1; i<=NF-1; ++i) 
         {
           if ($i >= offset) 
           {
             ;
           }
           else
           {
             not_part++;
           }
         }

         if(not_part != NF-1)
         { 
           for (i=1; i<=NF-1; ++i) 
           {
             if ($i >= foffset && $i <= soffset) 
             {
               printf("%d, ", $i); count++;
             }
             else
             {
               printf("(%d), ", $i); count++; 
             }
           }
           if(count!=0) printf("%d\n", $NF);
         }
       }';
     done
  fi
  cur_offset_first=$cur_offset_second;
  curr_line=$next_line;
done
